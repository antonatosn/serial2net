name: Go Build & Sign

permissions:
  contents: write
  pull-requests: write

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build -v -o serial2net_${{ matrix.goarch }}_${{ matrix.goos }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}

      - name: Upload unsigned artifacts
        uses: actions/upload-artifact@v4
        with:
          name: serial2net_${{ matrix.goos }}-${{ matrix.goarch }}
          path: serial2net_${{ matrix.goarch }}_${{ matrix.goos }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  sign:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Download unsigned artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Sign Windows binaries
        run: |
          Get-ChildItem dist -Recurse -Filter "serial2net*.exe" | ForEach-Object {
            Write-Host "Signing $($_.FullName)"
            signtool sign `
              /fd sha256 `
              /tr http://ts.harica.gr `
              /td sha256 `
              /sha1 $env:CODE_SIGN_THUMBPRINT `
              /as `
              /v `
              /csp "Microsoft Enhanced RSA and AES Cryptographic Provider" `
              /keylength 4096 `
              $_.FullName
          }
        shell: pwsh
        env:
          CODE_SIGN_THUMBPRINT: ${{ secrets.CODE_SIGN_THUMBPRINT }}

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-binaries
          path: dist/*

  release:
    needs: sign
    runs-on: ubuntu-latest
    steps:
      - name: Download signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: signed-binaries
          path: release-dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload binaries to Release
        run: |
          for file in release-dist/*; do
            echo "Uploading $file..."
            base_name=$(basename "$file")
            curl -sL \
              --request POST \
              --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              --header "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${base_name}"
          done
