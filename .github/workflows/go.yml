# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Build
permissions:
  contents: read
  pull-requests: write
  
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, arm64]    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: go mod tidy

    - name: Build
      run: go build -v -o ${{ runner.os }}-${{ matrix.goarch }}-${{ matrix.goos }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ runner.os }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ runner.os }}-${{ matrix.goarch }}-${{ matrix.goos }}
  
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload binaries to Release
        run: |
          ls -l artifacts
          for file in artifacts/*/*; do
            if [[ -f "$file" ]]; then
              echo "Uploading $file..."
              base_name=$(basename "$file")
              curl -sL \
                --request POST \
                --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                --header "Content-Type: application/octet-stream" \
                --data-binary "@$file" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=${base_name}"
            else
              echo "Skipping non-file: $file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
